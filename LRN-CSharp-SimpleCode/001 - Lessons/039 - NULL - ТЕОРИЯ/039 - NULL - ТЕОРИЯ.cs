using System;

/* NULL - ТЕОРИЯ
 * 
 * Источник: https://www.youtube.com/watch?v=wqUiYYVZDI4
 */

namespace _039___NULL___ТЕОРИЯ
{
    internal class Program
    {
        struct MyStruct
        {

        }
        static void Main(string[] args)
        {
            /* null - это отсутствие ссылки на объект или значение
             * в Управляемой Куче (Heap).
             * 
             * Значение null может использоваться только с сылочными
             * типами, а также присваивается как дефолтное значение
             * при объявлении ссылочных типов.
             * 
             * Когда мы объявляем переменную ссылочного типа, но при
             * этом не присваеваем ей значение, то происходит
             * размещение "Ярлыка" в Стеке на данные в Куче которых нет,
             * вследствии этого ссылочному типу присваивается значение
             * null, говоря об отсутствии ссылки на данные.
             * 
             * 
             * 
             */
            bool b;   // false
            int a;    // 0
            double d; // 0

            MyStruct myStruct; // {_039___NULL___ТЕОРИЯ.Program.MyStruct}

            Random random; // null
            int[] arr;     // null
            string str;    // null



            int[] x;             // null - в Стеке появилась переменная X со ссылкой вникуда
            x = new int[10];     // переменная X в Стеке - получила ссылку на данные в Куче
            x = null;            // переменная X в Стеке потеряла ссылку на данные в Куче,
                                 // а сами данные ожидают события вызовающего Сборщик Мусора.
                                 //
            Console.Write(x[0]); // В случае попытки извлечь данные из переменной которой
                                 // присвоено значение null, мы получим ошибку NullReferenceException.

            /* string (строка) также является ссылочным типом данных т.к.
             * строка это массив чаров. При передаче строки в метод или
             * присваивании её в другую переменную происходит копирование
             * ссылки на объект в куче.
             * 
             * Однако в момент изменения данных через новую переменную
             * в строке, её поведение меняется и происходит создание 
             * нового объекта в куче с последующим размещением ссылки
             * на новый объект в новую переменную.
             * Это происходит из-за свойства строки immutable (неизменяемость).
             * 
             * Всё дальнейшее поведение соответствует описаному ранее.
             */
        }
    }
}
