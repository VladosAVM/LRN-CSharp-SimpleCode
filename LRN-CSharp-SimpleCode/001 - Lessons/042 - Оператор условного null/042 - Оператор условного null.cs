using System;
using System.Collections.Generic;
using System.Linq;

/* ?. - Оператор условного null
 * 
 * Источник: https://www.youtube.com/watch?v=UwVYKGi0XJk
 */

namespace _042___Оператор_условного_null
{
    internal class Program
    {
        static int[] GoodArray()
        {
            int[] array = { 1, 2, 3, 4 };
            return array;
        }
        static int[] NullArray()
        {
            int[] array = null;
            return array;
        }

        static void Main(string[] args)
        {

            /* ?. оператор условного null используется для проверки переменной
             * на наличия в ней значения null.
             * В случае если переменная = null то дальниейшие действия с
             * переменной не выполняются.
             * 
             * Как пример можно расмотреть метод Sum() вызываемый к массиву.
             * Данный метод возвращает сумму всех элементов массива.
             * Предположим что мы получаем какието данные из-вне, и к нам приходит
             * массив со значением null (отсутсвие ссылки).
             * В таком случае при дальнейшем выполнении метода Sum мы
             * получим ошибку ArgumentNullException.
             * Чтобы избежать подобного мы осуществляем проверку на наличие null при
             * помощи конструкции if else, но чтобы не городить лишний код и записать
             * всё в более краткой форме, мы можем использовать оператор .?
             * 
             * Пример:
             *      имя_массива?.Sum();
             * 
             * Данный оператор можно использовать в сочитании с оператором объединения
             * с null ??
             * 
             * Пример:
             *      имя_массива?.Sum() ?? 0
             * 
             * Это позволит нам избежать возникновения ошибки и установит указанное
             * нами дефолтное значение.
             */

            // Пример 1:
            //  Массив содержит данные
            int[] goodArray = GoodArray();
            Console.WriteLine($"Сумма элементов массива = {goodArray.Sum()}");

            // Пример 2:
            //  Массив содержит null, по этой причине при вызове метода .Sum возникнет
            //  исключение ArgumentNullException.
            //  Для того чтобы избежать возникновения данного исключения, массив стоит
            //  проверять на наличие null.
            //  Сделать это можно при помощи конструкции If-Else или оператора условного null - ?.
            //  Устанавливать данный оператор необходимо перед вызовом метода .Sum
            //  nullArray1?.Sum()
            //  В таком случае если в массиве будет null, то метод .Sum НЕ будет вызван.

            int[] nullArray1 = NullArray();
            Console.WriteLine($"Сумма элементов массива = {nullArray1?.Sum()}");

            // Пример 3:
            //  Также, оператор условного null - ?. можно использовать вместе с оператором
            //  объединени с null - ??
            //  Это позволит присваивать указанное дефолтное значение в результат операции. 
            //  nullArray2?.Sum() ?? 0
            //  В этом случае если массив будет содержать null, то метод .Sum также НЕ вызовется,
            //  а результатом всего вырожения будет 0, благодаря оператору ??
            int[] nullArray2 = NullArray();
            Console.WriteLine($"Сумма элементов массива = {nullArray2?.Sum() ?? 0}");
        }
    }
}
