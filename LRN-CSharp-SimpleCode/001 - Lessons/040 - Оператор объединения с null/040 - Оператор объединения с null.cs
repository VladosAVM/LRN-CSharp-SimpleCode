using System;

/* ?? - Оператор объединения с null
 * 
 * Источник: https://www.youtube.com/watch?v=mXh0ci6O6og
 */

namespace _040___Оператор_объединения_с_null
{
    internal class Program
    {
        static void Main(string[] args)
        {
            /* ?? - данный оператор позволяет присвоить новое
             * дефолтное значение в переменные которые имеют
             * значение null.
             * 
             * Оператор ?? позволяет избежать использования
             * конструкций типа if else для проверки и внесения
             * изменений в значение переменной, что позволяет
             * сделать запись более краткой и понятной,
             * а также избежать создания дополнительных переменных.
             */

            // !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
            // !!! ВНИМАНИЕ !!! ВНИМАНИЕ !!! ВНИМАНИЕ !!! ВНИМАНИЕ !!! ВНИМАНИЕ !!! ВНИМАНИЕ !!!
            // !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
            // !!!
            // !!! Оператор ?? - НЕ присваивает новое значение в исходную переменную,
            // !!! а просто подменяет вывод значения при обращении к переменной.
            // !!! Пример:
            string str = null;
            Console.WriteLine(str ?? "123");
            // !!! На консоль будет выведено значение 123, однако значение самой
            // !!! переменной str останется null.
            // !!!
            // !!! Оператор ?? - ПРИСВАИВАЕТ новое значение в промежуточную переменную.
            // !!! Пример:
            string result = str ?? "123";
            Console.WriteLine(result);
            // !!! Переменная str по прежнему будет содержать null, однако в переменную
            // !!! result будет присвоено значение 123, и на консоль мы получим вывод 123.
            // !!!
            // !!! Подробную работу ?? смотрите через DeBug.
            // !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

            // Пример БЕЗ использования ??:
            string str1 = null; // Переменная со значенией NULL
            string result1;     // Промежуточная переменная для сохранения данных.
                                // (Можно не использовать).

            if (str1 == null)               // Конструкция проверки на NULL и
                result1 = "Нет данных";     // присвоения нового значения в случае наличия NULL
            else                            //
                result1 = str1;             //
            
            Console.WriteLine(result1);

            // Пример с использованием ??:
            string str2 = null;
            string result2 = str2 ?? "Нет данных";
            Console.WriteLine(result2);

            // Без создания дополнительной переменной result
            Console.WriteLine(str2 ?? "Нет данных");

            /* Также при помощи оператора ?? можно избегать
             * появления ошибок в ходе выполнения программы.
             * 
             * Предположим к нам в программу приходят какие-то
             * данные из-вне, и одними из таких данных будет null.
             * При попытке както обработать подобные данные,
             * с высокой долей вероятности мы получим ошибку
             * NullReferenceException.
             */

            // Пример:
            string testStr = null;
            string testStrResult = testStr ?? string.Empty; // string.Empty присваивает пустую
                                                            // строку, пустая строка это НЕ null,
                                                            // это строка в которой нет символов.

            // Вывод без ошибки
            Console.WriteLine($"Длинна строки: {testStrResult.Length}");

            // Вывод с ошибкой NullReferenceException, т.к. мы пытаемся
            // получить данные у свойста Length, обращаясь к объекту которого
            // не существует в упраляемой куче или отсутствует ссылка на объект.
            Console.WriteLine($"Длинна строки: {testStr.Length}");
        }
    }
}
