using System;

/* Конструктор класса
 * 
 * Источник: https://www.youtube.com/watch?v=4z9vkieAyfM
 */

namespace _059___Конструктор_класса
{
    class TestClass
    {
        // Конструктор класса
        //  1. Имеет модификатор доступа
        //  2. Не может возвращать значения
        //  3. Имеет имя такоеже как и у самого класса
        //  4. Может принимать аргументы также как и метод
        //  5. Аргументы конструктора могут быть необязательными, также как и в методах
        public TestClass(string str = "Конструктор")
        {
            Console.WriteLine($"{_str} - cw в конструкторе TestClass ДО изменения _str");
            _str = str;
            Console.WriteLine($"{_str} - cw в конструкторе TestClass ПОСЛЕ изменения _str");
        }

        // Поле класса
        // Поля класса с модификатором доступа PRIVATE - принято именовать начиная с нижнего подчёркивания _fieldName
        // Без явного указания модификатора доступа - поле имеет модификатор PRIVATE по умолчанию
        private string _str = "Поле класса";

        // Метод класса
        public void PrintStr()
        {
            Console.WriteLine($"{_str} - cw в методе PrintStr ДО изменения _str");
            _str = "Метод PrintStr";
            Console.WriteLine($"{_str} - cw в методе PrintStr ПОСЛЕ изменения _str");
        }
    }

    internal class Program
    {
        static void Main(string[] args)
        {
            /* Конструктор — это специальный метод, который не имеет возвращаемого типа
             * и называется так же, как и сам класс.
             * Он вызывается при создании объекта класса.
             * 
             * Если конструктор не создан вручную то он создаётся автоматически по умолчанию,
             * при этом, в коде он будет НЕвидим.
             * У любого класса всегда есть конструктор по умолчанию.
             * 
             * Синтаксис конструктора класса:
             *      модификатор_класса class имя_класса
             *      {
             *          модификатор_конструктора имя_конструктора(аргументы конструктора)
             *          {
             *              тело_конструктора
             *          }
             *      }
             * 
             * Пример:
             *      class MyClass
             *      {
             *          public MyClass(bool isTrue)
             *          {
             *              _isTrue = isTrue
             *          }
             *          private bool _isTrue = true
             *      }
             *      
             *      MyClass myClass = new MyClass(isTrue: false);
             * 
             * Сниппет для создания конструктора класса: ctor + Tab + Tab
             * 
             * Если модификатор доступа конструктора класса указать как Private,
             * то создать экземпляр класса вне самого класса будет невозможно.
             * Подобная работа конструктора используется в паттерне SingleTon
             * 
             * В примере ниже наглядно показано что тело конструктора класса отрабатывает только 1 раз,
             * при создании экземпляра класса и первом вызове метода класса.
             * При повторном вызоме метода класса, конструктор не отрабатывает.
             */

            // Создание экземпляра класса С указанием значения НЕобязательного параметра, поля str
            TestClass testClass1 = new TestClass(str: "Создание экземпляра класса");

            Console.WriteLine("\n- Вызов метода PrintStr сразу после создания экземпляра класса " +
                "и передачей аргумента 'str: Создание экземпляра класса' в конструктор класса");
            testClass1.PrintStr();
            Console.WriteLine("\n- Повторный вызов метода PrintStr");
            testClass1.PrintStr();

            Console.WriteLine("\n-------------------------\n");

            // Создание экземпляра класса БЕЗ указанием значения НЕобязательного параметра, поля str
            TestClass testClass2 = new TestClass();

        }
    }
}
