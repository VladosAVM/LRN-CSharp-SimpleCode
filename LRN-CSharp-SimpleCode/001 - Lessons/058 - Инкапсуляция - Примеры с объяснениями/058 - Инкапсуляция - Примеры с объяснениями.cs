using System;

/* Инкапсуляция - Примеры с объяснениями
 * 
 * Источник: https://www.youtube.com/watch?v=C0FNqM7hsao
 */

namespace _058___Инкапсуляция___Примеры_с_объяснениями
{
    /// <summary>
    /// Тестовый класс для демонстрации инкапсуляции
    /// </summary>
    class Gun
    {
        // Состояние оружия
        // Модификатор PRIVATE делает переменную доступной только внутри класса
        // что позволяет избежать непредвиденной модивикации переменной другими
        // разработчиками, методами или какими-либо действиями
        private bool isLoaded;

        // Метод Reload также инкапсулирован при помощи модификатора PRIVATE.
        private void Reload() 
        {
            Console.WriteLine("Заряжаю...");
            isLoaded = true;
            Console.WriteLine("Заряжено!");
        }

        // Метод Shoot доступен везде благодаря модификатора PUBLIC, и вся работа
        // с классом Gun осуществляется через него.
        public void Shoot()
        {
            if (!isLoaded)
            {
                Console.WriteLine("Орудие НЕ заряжено!");
                Reload();
            }
            Console.WriteLine("Bang!!!");
            isLoaded = false;
        }
    }

    internal class Program
    {
        static void Main(string[] args)
        {
            /* Модификаторы доступа Public и Private позволяют управлять доступом к
             * полям и методам класса на уровне экцемпляра класса и внутри самого класса.
             * 
             * Инкапсуляция — один из ключевых принципов объектно-ориентированного
             * программирования (ООП), и в C# она используется для скрытия внутренней
             * реализации объекта и ограничения доступа к его данным извне. Проще говоря,
             * инкапсуляция позволяет «спрятать» детали реализации и разрешить доступ только
             * через строго определённые интерфейсы (методы, свойства).
             * 
             * Инкапсуляция:
             *  1. Скрывает состояние объекта.
             *  2. Защищает от внешнего воздействия.
             *  3. Позволяет изменять состояние объекта только
             *     с помощью методов этогоже класса\объекта.
             * 
             * Инкапсуляция делает код надёжнее, безопаснее и удобнее для сопровождения.
             * Она позволяет разделить обязанности и изолировать изменения, что особенно важно
             * при работе в больших проектах.
             * 
             * У классов есть состояние и поведение:
             *  1. Состояние - это значения полей класса
             *  2. Поведение - это методы в классе
             * 
             * Инкапсуляция нужная для того чтобы:
             *  1. Защита данных - предотвращает прямое изменение полей извне, чтобы не нарушить логику объекта.
             *  2. Контроль доступа - Через модификаторы (private, public, protected, internal) можно
             *     чётко задать, что доступно другим частям программы.
             *  3. Гибкость и управление - можно при необходимости изменить реализацию, не затрагивая
             *     внешний код, если интерфейс остаётся прежним.
             *  4. Инкапсуляция логики - можно добавить проверку, логику в get, set или метод,
             *     прежде чем изменить состояние объекта.
             *  5. Принцип единственной ответственности - каждый объект отвечает только за себя, и его поведение
             *     не должно напрямую зависеть от других классов.
             */

            // Чтобы вызвать мтеод Shoot у класса Gun,
            // необходимо создать экземпляр класса Gun
            // и вызвать метод Shoot через созданный экземпляр.
            Gun gun = new Gun();
            gun.Shoot();
        }
    }
}
