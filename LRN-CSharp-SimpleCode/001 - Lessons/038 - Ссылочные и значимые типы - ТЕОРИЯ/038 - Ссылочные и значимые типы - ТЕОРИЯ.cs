using System;

/* Ссылочные и значимые типы - ТЕОРИЯ
 * 
 * Источник: https://www.youtube.com/watch?v=_RUluZNOwfY
 */

namespace _038___Ссылочные_и_значимые_типы___ТЕОРИЯ
{
    internal class Program
    {
        static void Main(string[] args)
        {
            /* В C# все данные распределяются на 2 типа:
             *      1. Значимые типы (Value types)
             *      2. Ссылочные типы (Reference types)
             * Значимые типы (struct, enum) хронятся в стеке.
             * Ссылочные типы (class) хронятся в куче.
             * 
             * Стек (Stack) и Куча (Heap) это область в оперативной
             * памяти, но работают и используются они по разному.
             * 
             * Стек (Stack) это небольшой объём оперативной памяти который 
             * выделяется для каждого потока, т.е. каждый поток в программе
             * имеет свой Стек.
             * Дефолтное значение для Стека = 1 мегабайт.
             * Стек используется для хранения создаваемых переменных,
             * для выполнения операций над этими переменными, а также
             * для вызова методов которые используются в программе.
             * 
             * Куча (Heap) это что-то вроде склада в оперативной памяти которое
             * мы можем использовать по мере появления необходимости.
             * Объём Кучи зависит от того на какой аппаратной платформе
             * запускается программа и от операционной системы.
             * К примеру в 32-х разрядной системе выделяется около 1.5 гигабайта,
             * а в 64-х разрядной системе выделяется до 8 терабайт.
             * 
             * Если говорить просто, то Стек - быстрый, но мленький,
             * а Куча - медленная, но большая.
             * 
             * Одной из ключевых особенностей различия Стека и Кучи является
             * процесс очищения данных из оперативной памяти.
             * Значимые типы находящиеся в Стеке, удаляются из оперативной
             * памяти сразу после того как программа покидает контекст в
             * котором эти переменный были объявленны.
             * Ссылочные типы находящиеся в Куче, удаляются из оперативной
             * памяти при помощи сборщика мусора. Описать весь принцип работы
             * сборщика мусора здесь не получится, поэтому данную информацию
             * лучше поискать в интернете.
             * 
             * INFO: Стек работает по принципу Last In --> First Out, т.е. последняя
             *       задача которая попала в Стек, будет извлечена первой.
             * 
             * Значимые и Ссылочные типы также различаются по принципу передачи
             * данных от одной переменной к другой.
             *      1. Значимые типы - при присвоении значения одной переменной
             *      в другую, происходит копирования ДАННЫХ из источника в СТЕКЕ.
             *      2. Ссылочные типы - при присвоении значения одной переменной
             *      в другую, происходит копирование ССЫЛКИ на источник в КУЧЕ.
             * 
             * Дополнительное видео по стеку: https://www.youtube.com/watch?v=B3VHHfMW0Pg
             */

            // Выполнение и хранение на СТЕКе
            /*  1. Арефметические оепрации:
             *      Простые вычисления выполняются в регистрах процессора,
             *      но временные значения могут помещаться в стек.
             */
            int a = 5 + 3; // Операция сложения выполняется в регистрах,
                           // но переменная `a` хранится в стеке.

            /*  2. Объявление переменных значимого типа (Value Type)
             *      Переменные примитивных типов хранятся на стеке
             */
            int b;
            double c;
            bool d;
            char e;
            float f;
            // и т.д.

            // Локальные переменные структур (struct) также
            // хранятся на стеке (если не являются частью объекта в куче):
            Point g = new Point(); // Хранится на стеке

            // Enum также хранятся на стеке - если они НЕ являются частью объекта в куче.
            // Они являются значимыми типами и ведут себя как int, byte, long и т. д.
            Day today = Day.Monday; // Переменная `today` хранится на стеке


            /*  3. Вызовы методов - При вызове метода создаётся
             *  кадр стека (stack frame), содержащий:
             *      1. Адрес возврата (куда вернуться после завершения метода)
             *      2. Локальные переменные метода
             *      3. Аргументы метода
             *      4. Временные данные (например, при передаче параметров)
            */
            MethodA(); // Вызов MethodA() → создаётся кадр MethodA
                       // MethodA вызывает MethodB() → создаётся новый кадр MethodB
                       // После завершения MethodB, его кадр удаляется, и управление
                       // возвращается в MethodA


            // Ссылочные типы
            Random random = new Random(); // Экземпляры классов являются ссылочными
                                          // типами и хранятся в Heap (в куче)

            int[] arr = new int[5]; // Любой массив является ссылочным типом т.к.
                                    // является наследником класса Array

            string str = "String";  // Строки являются ссылочным типом данных по
                                    // той причине что строка это массив данных
                                    // типа Char, а все массивы это ссылочные типы
                                    // данных так как они являются наследниками класса Array.
            

            /*  Список ссылочных типов:
             *      1. Классы (class)
             *      2. Интерфейсы (interface)
             *      3. Делегаты (delegate)
             *      4. Массивы (array)
             *      5. Строки (string)
             *      6. Записи (record)
             *      7. Объект (object)
             *      8. Динамический тип (dynamic)
             */
        }
        // ЗНАЧИМЫЕ
        static void MethodA() { MethodB(); }
        static void MethodB() { int x = 10; }

        struct Point { public int X, Y; }
        enum Day { Monday, Tuesday, Wednesday }

        // ССЫЛОЧНЫЕ
        class Person { public string Name; }
        interface IAnimal { void MakeSound(); }
        delegate void MyDelegate(string message);



    }
}
