using System;

/* CLASS
 * 
 * Источник: https://www.youtube.com/watch?v=lg_D_1KNBek
 * Что такое ООП: https://www.youtube.com/watch?v=rZcTaRU7AAw
 */

namespace _055___CLASS
{
    enum Color
    {
        Red,
        Green,
        Blue,
        White
    }

    class Point // Название класса
    {
        // Тело класса в котором описываются - поля, методы, свойства класса
        public int x; // Поле класса с модификатором public - поле доступно отовсюду
        public int y;
        public Color color; // Использование enum в классе
    }

    /// <summary>
    /// Класс описывающий свойства студента
    /// </summary>
    //class Student
    //{
    //    public Guid id;             // Уникалный идентификационный номер
    //    public string firstName;    // Имя
    //    public string lastName;     // Фамилия
    //    public string middleName;   // Отчество
    //    public int age;             // Возрост
    //    public string group;        // Группа
    //}


    internal class Program
    {
        static Student GetStudent()
        {
            Student student = new Student();

            student.id = Guid.NewGuid();
            student.firstName = "Kamar";
            student.lastName = "Joba";
            student.middleName = "Genazvale";
            student.age = 19;
            student.group = "1a";

            return student;
        }
        static void PrintStudent(Student student)
        {
            Console.WriteLine($"Информация о студенте:\n" +
                              $"ID: {student.id}\n" +
                              $"Имя: {student.firstName}\n" +
                              $"Фамилия: {student.lastName}\n" +
                              $"Отчество: {student.middleName}\n" +
                              $"Возраст: {student.age}\n" +
                              $"Группа: {student.group}");
        }
        static void Main(string[] args)
        {
            /* ООП - Объектно-ориентированное программирование было созданно
             * для упращения построения, использования и дальнейшей поддержки
             * программного обеспечения.
             * В ООП используется метод описания части программы как объекта, у
             * которого есть характеристики, состояние и поведение.
             * Классы, структуры, объекты, экземляры классов - существуют для того
             * чтобы у разработчика была возможность перенести реальный объект в код.
             * Также в ООП есть 3 принциа(концепции):
             *  1. Инкапсуляция
             *  2. Наследование
             *  3. Полиморфизм
             * 
             * 
             * 
             * Класс это наш собственный тип данных и для его опасания необходимо
             * использовать другите типы данных. Это могут быть как другие классы
             * или структуры, так и приметивные типы данных, например: int, bool, string...
             * 
             * Переменные внутри класса называются полями.
             * У каждого поля есть свой модификатор доступа:
             *  1. public – поле доступно отовсюду.
             *  2. private – доступно только внутри самого класса.
             *  3. protected – доступно внутри класса и его наследников.
             *  4. internal – доступно внутри текущей сборки (assembly).
             *  5. protected internal – доступно внутри текущей сборки и в наследниках.
             *  6. private protected – доступно в текущем классе и его наследниках, но только в рамках той же сборки.
             * 
             * Для того чтобы работать с классом после его создания, необходимо создать экземпляр класса.
             * Создание экземпляра класса:
             *      название_класса имя_объекта = new название_класса();
             * 
             * Для внесения даных в экземляр класса, необходимо обратится к его полю и указать значение.
             * Внесение данных в поля экземляра класса:
             *      имя_экземпляра_класса.имя_поля = значение;
             * 
             * !!!
             * В сулчае если эекземпляр класса будет содержать null, то при попытке присвоения значения
             * в поле класса мы получим ошибку NullReferenceException.
             * !!!
             * 
             * При обращении к экземпляру класса есть возможность обратиться не только к полю класса,
             * но и вызвать некоторые методы.
             * Эти методы являются чатью концепции ООП, а именно "Наследованием".
             * В C# любой объект в C# является наследником типа данных "object".
             * По этой причине во время обращения к экземпляру класса появляется возможность
             * вызвать методы: Equals, GetHashCode, GetType, ToString.
             * Также у класса могут быть свои собственные методы которые определяют его поведение.
             * 
             * 
             * 
             * Для улучшения читаемости кода, соблюдения порядка в коде, разбивки ПО на логические
             * части (соблюдения правил архитектуры ПО), принято выносить классы в отдельные файлы.
             * Для этого в SolutionExplorer необходимо сделать ПКМ по нужному проекту, выбрать add,
             * выбрать class и указать имя класса.
             * !!!
             * Вынесенный класс будет доступен только в рамках одного namespace.
             * Если namespace будет отличаться, то для использования класса будет необходимо
             * прописать using название_неймспейса.
             * 
             * 
             * 
             */

            Point p1 = new Point(); // Создание экземпляра класса
            p1.x = 4;               // Присвоение значения в поле "x"
            p1.y = 2;               // Присвоение значения в поле "y"
            Console.WriteLine($"p1.x = {p1.x}, p1.y = {p1.y}");

            Point p2 = new Point();
            p2.x = 2;
            p2.y = 6;
            Console.WriteLine($"p2.x = {p2.x}, p2.y = {p2.y}");

            // p2 = null;  // удаление ссылки
            // p2.x = 2;   // NullReferenceException
            // p2.y = 6;   // NullReferenceException

            Point p3 = new Point();
            p3.x = 1;
            p3.y = 4;
            p3.color = Color.Red;   // p3.color = (Color)0;

            Console.WriteLine($"\nx = {p3.x}, y = {p3.y}, color = {p3.color}");

            var firstStudent = GetStudent();
            Console.WriteLine();
            PrintStudent(firstStudent);




        }
    }
}
